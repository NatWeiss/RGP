diff --git a/frameworks/js-bindings/cocos2d-x/cocos/platform/mac/CCDevice.mm b/frameworks/js-bindings/cocos2d-x/cocos/platform/mac/CCDevice.mm
index 0d13a3a..4cb0460 100644
--- a/frameworks/js-bindings/cocos2d-x/cocos/platform/mac/CCDevice.mm
+++ b/frameworks/js-bindings/cocos2d-x/cocos/platform/mac/CCDevice.mm
@@ -118,8 +118,7 @@ static bool _initWithString(const char * text, Device::TextAlign align, const ch
 				NSMutableString *lineBreak = [[[NSMutableString alloc] init] autorelease];
 				NSUInteger length = [string length];
 				NSRange range = NSMakeRange(0, 1);
-                CGSize textSize;
-				NSUInteger lastBreakLocation = 0;
+                NSUInteger lastBreakLocation = 0;
                 NSUInteger insertCount = 0;
 				for (NSUInteger i = 0; i < length; i++) {
 					range.location = i;
@@ -128,7 +127,7 @@ static bool _initWithString(const char * text, Device::TextAlign align, const ch
 					if ([@"!?.,-= " rangeOfString:character].location != NSNotFound) {
                         lastBreakLocation = i + insertCount;
                     }
-                    textSize = [lineBreak sizeWithAttributes:tokenAttributesDict];
+                    auto textSize = [lineBreak sizeWithAttributes:tokenAttributesDict];
                     if(textSize.height > info->height)
                         break;
 					if (textSize.width > info->width) {
diff --git a/frameworks/js-bindings/cocos2d-x/extensions/GUI/CCEditBox/CCEditBoxImplMac.h b/frameworks/js-bindings/cocos2d-x/extensions/GUI/CCEditBox/CCEditBoxImplMac.h
index a5b93c4..d7abaff 100644
--- a/frameworks/js-bindings/cocos2d-x/extensions/GUI/CCEditBox/CCEditBoxImplMac.h
+++ b/frameworks/js-bindings/cocos2d-x/extensions/GUI/CCEditBox/CCEditBoxImplMac.h
@@ -39,6 +39,8 @@
 
 @interface CCEditBoxImplMac : NSObject <NSTextFieldDelegate>
 {
+    NSTextField* textField_;
+	NSSecureTextField *secureTextField_;
     void* editBox_;
     BOOL editState_;
     NSMutableDictionary* placeholderAttributes_;
diff --git a/frameworks/js-bindings/cocos2d-x/extensions/GUI/CCEditBox/CCEditBoxImplMac.mm b/frameworks/js-bindings/cocos2d-x/extensions/GUI/CCEditBox/CCEditBoxImplMac.mm
index fbeed2e..28e7a56 100644
--- a/frameworks/js-bindings/cocos2d-x/extensions/GUI/CCEditBox/CCEditBoxImplMac.mm
+++ b/frameworks/js-bindings/cocos2d-x/extensions/GUI/CCEditBox/CCEditBoxImplMac.mm
@@ -324,7 +324,7 @@ void EditBoxImplMac::setPlaceholderFont(const char* pFontName, int fontSize)
         return;
     }
     
-    _sysEdit.placeholderAttributes[NSFontAttributeName] = font;
+    [_sysEdit.placeholderAttributes setObject:font forKey:NSFontAttributeName];
     
     /* reload placeholder */
     const char *placeholder = [_sysEdit.textField.cell placeholderAttributedString].string.UTF8String;
@@ -343,7 +343,7 @@ void EditBoxImplMac::setFontColor(const Color3B& color)
 void EditBoxImplMac::setPlaceholderFontColor(const Color3B& color)
 {
     NSColor *nsColor = [NSColor colorWithCalibratedRed:color.r/255.f green:color.g / 255.f blue:color.b / 255.f alpha:1.0f];
-    _sysEdit.placeholderAttributes[NSForegroundColorAttributeName] = nsColor;
+    [_sysEdit.placeholderAttributes setObject:nsColor forKey:NSForegroundColorAttributeName];
     
     /* reload placeholder */
     const char *placeholder = [_sysEdit.textField.cell placeholderAttributedString].string.UTF8String;
diff --git a/frameworks/js-bindings/cocos2d-x/plugin/jsbindings/script/jsb_pluginx.js b/frameworks/js-bindings/cocos2d-x/plugin/jsbindings/script/jsb_pluginx.js
index 250b807..cb1901a 100644
--- a/frameworks/js-bindings/cocos2d-x/plugin/jsbindings/script/jsb_pluginx.js
+++ b/frameworks/js-bindings/cocos2d-x/plugin/jsbindings/script/jsb_pluginx.js
@@ -1,4 +1,4 @@
-plugin = plugin || {};
+var plugin = plugin || {PluginParam: {}, ProtocolAds: {}, ProtocolIAP: {}, ProtocolShare: {}, ProtocolSocial: {}, ProtocolUser: {}};
 
 plugin.PluginParam.ParamType = {};
 plugin.PluginParam.ParamType.TypeInt = 1;
diff --git a/frameworks/js-bindings/cocos2d-x/plugin/protocols/platform/ios/PluginFactory.mm b/frameworks/js-bindings/cocos2d-x/plugin/protocols/platform/ios/PluginFactory.mm
index 93d55b9..da42ddc 100644
--- a/frameworks/js-bindings/cocos2d-x/plugin/protocols/platform/ios/PluginFactory.mm
+++ b/frameworks/js-bindings/cocos2d-x/plugin/protocols/platform/ios/PluginFactory.mm
@@ -1,114 +1,114 @@
-/****************************************************************************
-Copyright (c) 2012-2013 cocos2d-x.org
-
-http://www.cocos2d-x.org
-
-Permission is hereby granted, free of charge, to any person obtaining a copy
-of this software and associated documentation files (the "Software"), to deal
-in the Software without restriction, including without limitation the rights
-to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-copies of the Software, and to permit persons to whom the Software is
-furnished to do so, subject to the following conditions:
-
-The above copyright notice and this permission notice shall be included in
-all copies or substantial portions of the Software.
-
-THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
-THE SOFTWARE.
-****************************************************************************/
-#include "PluginFactory.h"
-#include "ProtocolAds.h"
-#include "ProtocolAnalytics.h"
-#include "ProtocolIAP.h"
-#include "ProtocolShare.h"
-#include "PluginUtilsIOS.h"
-
-#import <Foundation/Foundation.h>
-#import "InterfaceAds.h"
-#import "InterfaceAnalytics.h"
-#import "InterfaceIAP.h"
-#import "InterfaceShare.h"
-
-namespace cocos2d { namespace plugin {
-
-static PluginFactory* s_pFactory = NULL;
-
-PluginFactory::PluginFactory()
-{
-
-}
-
-PluginFactory::~PluginFactory()
-{
-
-}
-
-PluginFactory* PluginFactory::getInstance()
-{
-	if (NULL == s_pFactory)
-	{
-		s_pFactory = new PluginFactory();
-	}
-
-	return s_pFactory;
-}
-
-void PluginFactory::purgeFactory()
-{
-	if (NULL != s_pFactory)
-	{
-		delete s_pFactory;
-		s_pFactory = NULL;
-	}
-}
-
-/** create the plugin by name */
-PluginProtocol* PluginFactory::createPlugin(const char* name)
-{
-	PluginProtocol* pRet = NULL;
-	do
-	{
-		if (name == NULL || strlen(name) == 0) break;
-
-		NSString* className = [NSString stringWithUTF8String:name];
-		Class theClass = NSClassFromString(className);
-		if (theClass == nil)
-		{
-			PluginUtilsIOS::outputLog("Unable to load class '%s'. Did you add the -ObjC linker flag?", name);
-			break;
-		}
-
-        id obj = [[NSClassFromString(className) alloc] init];
-        if (obj == nil) break;
-
-        if ([obj conformsToProtocol:@protocol(InterfaceAds)]) {
-            pRet = new ProtocolAds();
-        } else
-        if ([obj conformsToProtocol:@protocol(InterfaceAnalytics)]) {
-            pRet = new ProtocolAnalytics();
-        } else
-        if ([obj conformsToProtocol:@protocol(InterfaceIAP)]) {
-            pRet = new ProtocolIAP();
-        } else
-        if ([obj conformsToProtocol:@protocol(InterfaceShare)]) {
-            pRet = new ProtocolShare();
-        } else {
-            PluginUtilsIOS::outputLog("Plugin %s not implements a right protocol", name);
-        }
-
-		if (pRet != NULL)
-		{
-			pRet->setPluginName(name);
-			PluginUtilsIOS::initOCPlugin(pRet, obj, name);
-		}
-	} while(0);
-
-	return pRet;
-}
-
-}} //namespace cocos2d { namespace plugin {
+/****************************************************************************
+Copyright (c) 2012-2013 cocos2d-x.org
+
+http://www.cocos2d-x.org
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is
+furnished to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in
+all copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+THE SOFTWARE.
+****************************************************************************/
+#include "PluginFactory.h"
+#include "ProtocolAds.h"
+#include "ProtocolAnalytics.h"
+#include "ProtocolIAP.h"
+#include "ProtocolShare.h"
+#include "PluginUtilsIOS.h"
+
+#import <Foundation/Foundation.h>
+#import "InterfaceAds.h"
+#import "InterfaceAnalytics.h"
+#import "InterfaceIAP.h"
+#import "InterfaceShare.h"
+
+namespace cocos2d { namespace plugin {
+
+static PluginFactory* s_pFactory = NULL;
+
+PluginFactory::PluginFactory()
+{
+
+}
+
+PluginFactory::~PluginFactory()
+{
+
+}
+
+PluginFactory* PluginFactory::getInstance()
+{
+	if (NULL == s_pFactory)
+	{
+		s_pFactory = new PluginFactory();
+	}
+
+	return s_pFactory;
+}
+
+void PluginFactory::purgeFactory()
+{
+	if (NULL != s_pFactory)
+	{
+		delete s_pFactory;
+		s_pFactory = NULL;
+	}
+}
+
+/** create the plugin by name */
+PluginProtocol* PluginFactory::createPlugin(const char* name)
+{
+	PluginProtocol* pRet = NULL;
+	do
+	{
+		if (name == NULL || strlen(name) == 0) break;
+
+		NSString* className = [NSString stringWithUTF8String:name];
+		Class theClass = NSClassFromString(className);
+		if (theClass == nil)
+		{
+			PluginUtilsIOS::outputLog("Unable to load class '%s'. Did you add the -ObjC linker flag?", name);
+			break;
+		}
+
+        id obj = [[NSClassFromString(className) alloc] init];
+        if (obj == nil) break;
+
+        if ([obj conformsToProtocol:@protocol(InterfaceAds)]) {
+            pRet = new ProtocolAds();
+        } else
+        if ([obj conformsToProtocol:@protocol(InterfaceAnalytics)]) {
+            pRet = new ProtocolAnalytics();
+        } else
+        if ([obj conformsToProtocol:@protocol(InterfaceIAP)]) {
+            pRet = new ProtocolIAP();
+        } else
+        if ([obj conformsToProtocol:@protocol(InterfaceShare)]) {
+            pRet = new ProtocolShare();
+        } else {
+            PluginUtilsIOS::outputLog("Plugin %s not implements a right protocol", name);
+        }
+
+		if (pRet != NULL)
+		{
+			pRet->setPluginName(name);
+			PluginUtilsIOS::initOCPlugin(pRet, obj, name);
+		}
+	} while(0);
+
+	return pRet;
+}
+
+}} //namespace cocos2d { namespace plugin {
