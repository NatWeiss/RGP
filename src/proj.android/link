#!/bin/bash

# Check for NDK_ROOT
if [ ! -d "${NDK_ROOT}" ]; then
	echo "Please set the NDK_ROOT environment variable"
	exit 1
fi

# Set NDK_TOOLCHAIN_VERSION
if [ -d "${NDK_ROOT}/toolchains/arm-linux-androideabi-4.8" ]; then
	export NDK_TOOLCHAIN_VERSION="4.8"
elif [ -d "${NDK_ROOT}/toolchains/arm-linux-androideabi-4.7" ]; then
	export NDK_TOOLCHAIN_VERSION="4.7"
fi

# Check source
if [ ! -d "./obj/local" ]; then
	echo "Missing .o files. Please build first."
	exit 1
fi

# Get which ar
ar=$(${NDK_ROOT}/ndk-which ar)
echo "AR=${ar}"

# Make the libraries
for objDir in ./obj/local/*
do
	for config in Debug Release
	do
		echo

		arch=$(basename ${objDir})
		if [ "${config}" == "Debug" ]; then
			src="${objDir}/objs-debug"
		else
			src="${objDir}/objs"
		fi
		src=$(cd ${src}; pwd)
		echo "SRC=${src}"

		dest=../../lib/${config}-Android/${arch}
		mkdir -p ${dest}
		dest=$(cd ${dest}; pwd)
		echo "DEST=${dest}"
	
		lib="libcocos2dx-prebuilt.a"
		rm -f ${dest}/${lib}
		for dir in cocos2dxandroid_static cocos2dx_static cocosdenshion_static chipmunk_static box2d_static
		do
			${ar} rs ${dest}/${lib} $(find ${src}/${dir} -name *.o)
		done
	
		lib="libcocos2dx-plugins.a"
		rm -f ${dest}/${lib}
		for dir in PluginProtocolStatic cocos_localstorage_static cocostudio_static jsb_extension_static jsb_studio_static cocos2dx_store_static \
			cocos_network_static jsb_localstorage_static jsb_ui_static cocos_ui_static jansson_static jsb_network_static spine_static \
			cocos_extension_static cocosbuilder_static jsb_builder_static jsb_pluginx_static cocos_jsb_static jsb_chipmunk_static jsb_spine_static
		do
			${ar} rs ${dest}/${lib} $(find ${src}/${dir} -name *.o)
		done
	done
done

#CORES=$(grep -c ^processor /proc/cpuinfo 2>/dev/null || sysctl -n hw.ncpu)
